class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        
        
        unordered_set<int> Final;
        vector<int> Convert;
       
        
        for(int i=0;i<nums1.size();i++)
        {
            for(int j=0;j<nums2.size();j++)
            {
                if(nums1[i]==nums2[j])
                {
                    Final.insert(nums1[i]);
                }
            }
            
        }
        
        for(int x: Final)
        {
            Convert.push_back(x);
        }
        return Convert;
        
       
    }
};
// Using HashMap

unordered_map<int,int> m1,m2;
        for(int i=0;i<nums1.size();i++) m1[nums1[i]]++;
        for(int i=0;i<nums2.size();i++) m2[nums2[i]]++;
        
        vector<int> x;
        for(int i=0;i<nums1.size();i++)
        {
            if(m1[nums1[i]] and m2[nums1[i]])
            {
                 x.push_back(nums1[i]);
                 m1[nums1[i]]=0;
            }
           
        }
        return x;
// Using Hashmap for 3 Sorted Arrays:

unordered_map<int,int> m1,m2,m3;
         for(int i=0;i<nums1.size();i++) m1[nums1[i]]++;
         for(int i=0;i<nums2.size();i++) m2[nums2[i]]++;
         for(int i=0;i<nums3.size();i++) m3[nums3[i]]++;
         
         vector<int> x; 
         for(int i=0;i<nums1.size();i++)
         {
         if(m1[nums1[i]] and m2[nums1[i]] and m3[nums1[i]])
         {
            x.push_back(nums1[i]);
            m1[nums1[i]]=0;
         }
         }
 return x;
